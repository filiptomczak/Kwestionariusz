@model Zadanie.Models.SurveyViewModel

@{
    ViewBag.Title = "New";
}

<h2>New</h2>

@using (Html.BeginForm("Submit", "Home"))
{
    @Html.ValidationSummary();
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Email)
        @Html.TextBoxFor(m => m.Survey.Email, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Survey.Email)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Name)
        @Html.TextBoxFor(m => m.Survey.Name, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Survey.Name)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.LastName)
        @Html.TextBoxFor(m => m.Survey.LastName, new { @class = "form-control" })
        @Html.ValidationMessageFor(m => m.Survey.LastName)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Pesel)
        @Html.TextBoxFor(m => m.Survey.Pesel, new { @class = "form-control", @id = "Pesel" })
        @Html.ValidationMessageFor(m => m.Survey.Pesel)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Gender)
        @Html.DropDownListFor(m => m.Survey.GenderId, Model.Gender, new { @class = "form-control", @id = "Gender" })
        @Html.ValidationMessageFor(m => m.Survey.Gender)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.BirthDate)
        @Html.TextBoxFor(m => m.Survey.BirthDate, "hwdp {0:d MMM yyyy}", new { @class = "form-control", @id = "BirthDate" })
        @Html.ValidationMessageFor(m => m.Survey.BirthDate)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.GraduatedUni)
        @Html.DropDownListFor(m => m.Survey.GraduatedUni_Id, Model.Universities, new { @class = "form-control", @id = "SelectedUni" })
        @Html.ValidationMessageFor(m => m.Survey.GraduatedUni)
    </div>
    <div class="form-group" id="formFaculty">
        @Html.LabelFor(m => m.Survey.Faculty)
        @Html.DropDownListFor(m => m.Survey.Faculty_Id, Model.Faculties, new { @class = "form-control", @data_url = Url.Action("GetFaculties"), @id = "SelectedFaculty" })
        @Html.ValidationMessageFor(m => m.Survey.Faculty)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Age)
        @Html.TextBoxFor(m => m.Survey.Age, new { @class = "form-control", @id = "Age", @readonly = "readonly" })
        @Html.ValidationMessageFor(m => m.Survey.Age)
    </div>
    <div class="form-group">
        @Html.LabelFor(m => m.Survey.Grade)
        @Html.TextBoxFor(m => m.Survey.Grade, new { @class = "form-control", @id = "Grade"})
        @Html.ValidationMessageFor(m => m.Survey.Grade)
    </div>
    <button type="submit" class="btn btn-primary" id="btn">Wyslij</button>
}

@section scripts{
    <script>
        $(document).ready(function () {
            init();

            function init() {
                calculateAge();
                $("#formFaculty").hide();
                $("#SelectedUni").val(3);
                $("#SelectedFaculty").val(11);
            }

            function calculateAge() {
                var val = $("#Pesel").val();
                if (val.length >= 6) {
                    var year, month, day;
                    if (val[0] <= 2) {
                        year = 2000 + val[0] * 10 + val[1] * 1;
                    } else {
                        year = 1900 + val[0] * 10 + val[1] * 1;
                    }
                    if (val[2] == 0) {
                        month = val[3] * 1;
                    } else {
                        month = val[2] * 10 + val[3] * 1;
                    }
                    if (val[4] == 0) {
                        day = val[5] * 1;
                    } else if (val[4] == 1) {
                        day = 10 + val[5] * 1;
                    } else if (val[4] == 2) {
                        day = 20 + val[5] * 1;
                    } else {
                        day = 30 + val[5] * 1;
                    }
                    const dateNow = new Date();
                    const yearNow = dateNow.getFullYear();
                    const monthNow = dateNow.getMonth() + 1;
                    const dayNow = dateNow.getDate();

                    var age = yearNow - year;
                    if (month > monthNow) {
                        age--;
                    } else if (month === monthNow) {
                        if (day > dayNow) age--;
                    }
                    $("#Age").val(age);
                    $("#Age").text(age);
                    $("#Age").trigger("change");
                }
            }
            function calculateGender() {
                var val = $("#Pesel").val();
                if (val.length >= 10) {
                    if (val[9] % 2 === 0) {
                        var gender = $("#Gender").val(1);
                        console.log("female");
                    } else {
                        var gender = $("#Gender").val(2);
                        console.log("male");
                    }
                }
            }          

            $("#Pesel").on("keyup", function () {
                calculateAge();
                calculateGender();
            });
            $("#SelectedUni").change(function () {
                var val = $(this).val();
                if (val === "1" || val === "2") {
                    $("#formFaculty").show();
                    var $fac = $("#SelectedFaculty");
                    var url = $("#SelectedFaculty").data("url") + '?id=' + val;

                    $.getJSON(url, function (data) {
                        $fac.empty();
                        $.each(data, function (i, item) {
                            $fac.append($("<option>").text(item.Text).val(item.Value));
                        });
                    });
                } else {
                    $("#formFaculty").hide();
                }
            });

        });
    </script>
}
